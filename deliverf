#!/usr/bin/env python
# WARNING:
# Don't edit live version of this file because it is invoked
# at any instant by postfix lda (see /etc/aliases).
#
from __future__ import print_function
import sys,os,time,fcntl
from syslog import syslog, openlog

def logit(s):
   syslog("deliverf: "+s)
   print("deliverf: "+s, file=sys.stderr)	# debug

aparser=None
def arg_parser():
   global aparser
   if aparser: return aparser
   import argparse
   aparser = argparse.ArgumentParser(description=
   	"Deliver from stdin to file with locking.")
   aparser.add_argument("--nodotlock","-n",action="store_true",
   	help="Don't use the (more expensive) {filename}.lock locking. Use only flock.")
   aparser.add_argument("file",type=str)
   return aparser

def get_dotlock(dotlock):
   try:
      # check for stale lock
      lstat=os.stat(dotlock)
      # lock file exists
      lock_age=int(time.time() - lstat.st_mtime)
      if lock_age < 2:
         # A recient lock exists.
         # This will rarely happen, however, for performance reasons
         # we sleep a second here to make success obtaining the lock
         # more likely. This is an optimization only.
         time.sleep(1)
   except OSError:
      # lock file does not exist.
      lock_age = -1

   if lock_age > 120:
      # There is a lock file more than 120 seconds old.
      # This is an error situation that needs to be investigated.
      # The error may or may not be in this module. The .lock file may have
      # been left by another program. This error might be seen after a
      # power-failure or hard reset.
      logit("Error %s age %d seconds" % (dotlock,lock_age))
      # Here we try and unlink the stale lock-file, which could
      # result in a race condition if someone else already unlinked
      # it and created a new lock file. If something is leaving stale
      # lock files around, it needs to be fixed!!
      try:
         os.unlink(dotlock)
      except OSError:
         logit("Error unlinking " + dotlock)
         return False	# failed to get dotlock

   # There is no 'stale' lock file present, try and create the lock file.
   try:
      ld = os.open(dotlock,os.O_EXCL | os.O_CREAT)
   except OSError:
      # Could not create the .lock file because something else has the lock
      # or the volume is not mounted yet.
      if lock_age > 0:
         logit("warning, Lock age %d. (%s)." % (lock_age,dotlock))
      else:
         logit("warning, Cannot create %s" % dotlock)

      return False	# failed to get dotlock

   os.close(ld)
   # Note that the .lock file does not have to be opened and locked.
   # It simply has to exist and not be 'stale'. Some systems put the pid and
   # hostname in the lock file. Some systems create the lock file in two steps,
   # that is, create a temp file and then link it. I think that
   # os.O_EXCL | os.O_CREAT will be sufficient to avoid a collision on Linux.

   # Note that is important that the caller delete the dotlock later.
   return True	# succeeded in getting dotlock

def main(args):
   '''main must return an exit code for postfix.'''

   pargs=arg_parser().parse_args(args)

   openlog("mail")

   filename=pargs.file;

   if pargs.nodotlock:
      dotlock=None
   else:
      dotlock=filename+".lock"

   if dotlock:
      if not get_dotlock(dotlock):
         # Failed to get dotlock
         return 75	# try again later.


   # If we have created a lock file, it is important that it is removed
   # in all cases. We use the finally: clause for this.
   try:
      rc = deliver_to(filename)
   finally:
      if dotlock: os.unlink(dotlock)

   return rc

def deliver_to(filename):
   fd=None
   try:
      # Open the file for appending.
      fd = os.open(filename,os.O_APPEND | os.O_WRONLY | os.O_CREAT)
   except OSError:
      # In case the directory / mount is not available yet, exit with
      # a return code that will allow postfix to try again later.
      logit("unable to open: "+filename)
      return 75

   # Currently this flock is blocking, however, if we encouter odd
   # latency or deadlocks, then we could change this to be non-blocking
   # and return 75 to try again later.
   #
   # This should also work for NFS.
   #
   pre_lock=time.time()
   try:
      fcntl.flock(fd, fcntl.LOCK_EX)
   except IOError as e:
      logit("failed to lock %s: %s" % (filename, str(e)))
      return 75

   flock_delay=int(time.time() - pre_lock)
   if flock_delay > 20:
      # If it took more than 20 seconds to obtain the lock, we bail-out
      # here in order to avoid a collision with some other software
      # that might have different assumptions.
      logit("warning, delayed lock (%d) on %s" % (flock_delay,filename))
      return 75

   # Got the lock on the output file. Seek to end in case the file
   # changed while locking.
   os.lseek(fd,0,os.SEEK_END)

   # Append stdin to the output file.
   pre_write=time.time()

   buf=os.read(0,32768)
   while buf:
      os.write(fd,buf)
      lc=buf[-1]
      buf=os.read(0,32768)

   # If I were paranoid, I would check that the last character read was
   # a newline......
   if lc != '\n':
      logit("warning: added missing final newline to: "+filename)
      os.write(fd,'\n')

   #raise UserWarning("test")		# debug error injection
   #time.sleep(200)			# error injection
   os.close(fd)

   write_delay=int(time.time() - pre_write)
   if write_delay > 15:
      # We were successful in writing the file, however, if there was
      # a delay completing the operation, that should be investigated
      # because there could be a problem with assumptions in postfix
      # or other software.
      logit("warning: delay %d seconds writing %s" % (write_delay,filename))

   return 0 # success

if __name__ == "__main__":
   # Run as a program.
   try:
      rc = main(sys.argv[1:])
      # rc is is used by postfix to discard email or retry delivery later.
   except Exception as e:
      # Catch-all exception!
      exc_type, exc_obj, exc_tb = sys.exc_info()
      # Treat all unknown errors as "try again later".
      rc = 75
      logit("Internal ERROR at line %d: %s" % (exc_tb.tb_lineno, str(e)))

   sys.exit(rc)
