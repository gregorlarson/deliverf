#!/usr/bin/env python
#=============================================================================
# Copyright (C) 2014 Gregor Larson <gregor.larson@gmail.com>
#
# deliverf is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 2.1 of the License, or (at your option)
# any later version.
#
# deliverf is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
# A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
# details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with deliverf; if not, see:
#     http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html
#=============================================================================
'''deliverf script

@author: Gregor Larson <gregor.larson@gmail.com>
@license: LGPLv2.1
@version: 0.2
'''

# WARNING:
# Don't edit live version of this script because it is invoked
# at any instant by postfix lda (see /etc/aliases).
#
from __future__ import print_function
import sys,os,time,fcntl
from syslog import syslog, openlog, LOG_MAIL

log_to_syslog=False
def logit(s):
   global log_to_syslog
   if log_to_syslog:
      syslog(s)		# defaults to LOG_INFO

   print("deliverf: "+s, file=sys.stderr)

aparser=None
def arg_parser():
   global aparser
   if aparser: return aparser
   import argparse
   aparser = argparse.ArgumentParser(description=
   	"Deliver from stdin to file with locking.")
   aparser.add_argument("--nodotlock","-n",action="store_true",help=
	'''Don't use the (more expensive) {filename}.lock locking.
	Use only fcntl or flock advisory locking. As of version 0.2,
	this arg is no longer needed because this will be the default
	behaviour. To get the 0.1 behaviour, use -d''')
   aparser.add_argument("--dotlock","-d",action="store_true",help=
	'''Use dotlock method to lock files, in addition to the
	fcntl or flock locking.''')
   aparser.add_argument("--flock","-f",action="store_true",help=
	'''Use flock instead of fcntl locking. Note that will not
	work over NFS and it will not interact correctly with software
	using the newer fcntl advisory locking (like postfix), so,
	don't use this unless you have a specific reason.''')
   aparser.add_argument("--syslog","-s",action="store_true",help=
	'''Send diagnostic output to syslog mail.info as well as
	stderr.''')

   aparser.add_argument("file",type=str)
   return aparser

def get_dotlock(dotlock,check_only=False):
   '''Lock a file using the provided dotlock filename. The named file
   is created, if it does not exist, or, if it is stale, in which case
   a log is created. Note that if this function sees an existing, recent
   lock on a file, it will wait a couple seconds and check again.
   True is retured to indicate that the lock was obtained.
   The check_only flag runs without creating (or removing) any lock file
   and returns True to indicate not-locked or stale lock,
   without actually creating a lock file.
   It is important that the caller remove the lock-file when done.'''
   try:
      # check for stale lock
      lstat=os.stat(dotlock)
      # lock file exists
      lock_age=int(time.time() - lstat.st_mtime)
      if lock_age < 3:
         # A recient lock exists.
         if check_only:
            return False	# check-only case does not wait.

         # This will rarely happen, however, for performance reasons
         # we sleep a 2 seconds here to make success obtaining the lock
         # more likely. This is an optimization only.
         time.sleep(2)
   except OSError:
      # lock file does not exist.
      if check_only:
         return True	# no lock file found

      lock_age = -1

   # Note that postfix 2.9 uses a stale lock time of 500 seconds,
   # which seems really long to me.
   if lock_age > 120:
      # There is a lock file more than 120 seconds old.
      # This is an error situation that needs to be investigated.
      # The error may or may not be in this module. The .lock file may have
      # been left by another program. This error might be seen after a
      # power-failure or hard reset.
      if check_only:
         # In the check_only case, we consider a stale lock-file to
         # be not-locked (True). If we put this check after the
         # log below, that might result in repeated logs.
         return True

      logit("Error %s age %d seconds" % (dotlock,lock_age))
      # Here we try and unlink the stale lock-file, which could
      # result in a race condition if someone else already unlinked
      # it and created a new lock file. If something is leaving stale
      # lock files around, it needs to be fixed!!

      try:
         os.unlink(dotlock)
      except OSError:
         logit("Error unlinking " + dotlock)
         return False	# failed to get dotlock

   elif lock_age > 0:
      if check_only:
         # In the check-only case, return False if a non-stale lock file
         # was found.
         return False

   # There is no 'stale' lock file present, try and create the lock file.
   try:
      ld = os.open(dotlock,os.O_EXCL | os.O_CREAT)
   except OSError:
      # Could not create the .lock file because something else has the lock
      # or the volume is not mounted yet.
      if lock_age > 0:
         logit("warning, Lock age %d. (%s)." % (lock_age,dotlock))
      else:
         logit("warning, Cannot create %s" % dotlock)

      return False	# failed to get dotlock

   os.close(ld)
   # Note that the .lock file does not have to be opened and locked.
   # It simply has to exist and not be 'stale'. Some systems put the pid and
   # hostname in the lock file. Some systems create the lock file in two steps,
   # that is, create a temp file and then link it. I think that
   # os.O_EXCL | os.O_CREAT will be sufficient to avoid a collision on Linux.

   # Note that is important that the caller delete the dotlock later.
   return True	# succeeded in getting dotlock

def main(args):
   '''main must return an exit code for postfix.'''

   pargs=arg_parser().parse_args(args)

   if pargs.syslog:
      openlog(facility=LOG_MAIL)
      global log_to_syslog
      log_to_syslog=True

   filename=pargs.file;
   dotlock=filename+".lock"

   # We acutally check for a non-stale dotlock, even if that option
   # is not selected.
   if not get_dotlock(dotlock, check_only=not pargs.dotlock):
      # Failed to get dotlock or found an existing non-stale
      # dotlock.
      return 75	# try again later.

   # If we have created a lock file, it is important that it is removed
   # in all cases. We use the finally: clause for this.
   try:
      rc = deliver_to(filename,pargs.flock)
   finally:
      if pargs.dotlock: os.unlink(dotlock)

   return rc

def deliver_to(filename,flock=False):
   fd=None
   try:
      # Open the file for appending.
      # In theory, the O_APPEND flag should make an lseek to the
      # end unnecessary because writes will always be appended to
      # end of file. Not sure if this a bug or a feature :)
      # In any case, I want to append, so I will indicate O_APPEND
      # here, but I will use lseek also.
      #
      # It is an error for mail files to be executable, and, some
      # delivery agents will not write to it for security reasons.
      # Here, we give a create mode of 0660, however, if the file
      # already exists, we could check that it is NOT executable.
      # Note that the current umask is applied also. so the actual
      # mode may be 0640 (if umask is 0022).
      #
      fd = os.open(filename,os.O_APPEND | os.O_WRONLY | os.O_CREAT, 0o660)
   except OSError:
      # In case the directory / mount is not available yet, exit with
      # a return code that will allow postfix to try again later.
      logit("unable to open: "+filename)
      return 75

   # Currently this flock is blocking, however, if we encouter odd
   # latency or deadlocks, then we could change this to be non-blocking
   # and return 75 to try again later.
   #
   pre_lock=time.time()
   try:
      if flock:
         # Old BSD type flock system call, now supported on Linux as well,
         # however, this may not work for NFS. Also, this will not interact
         # properly with other software using the newer fcntl advisory
         # locking (the default now for postfix).
         fcntl.flock(fd, fcntl.LOCK_EX)
      else:
         # Newer fcntl locking that should also work on NFS
         # This is the default advisory locking now for postfix.
         fcntl.lockf(fd, fcntl.LOCK_EX)

   except IOError as e:
      logit("failed to lock %s: %s" % (filename, str(e)))
      return 75

   flock_delay=int(time.time() - pre_lock)
   if flock_delay > 10:
      # If it took more than 10 seconds to obtain the lock, we bail-out
      # here in order to avoid a collision with some other software
      # that might have different assumptions.
      logit("warning, delayed lock (%d) on %s" % (flock_delay,filename))
      return 75

   # Got the lock on the output file. Seek to end in case the file
   # changed while locking. Not sure this is actually required.
   os.lseek(fd,0,os.SEEK_END)

   # Append stdin to the output file.
   pre_write=time.time()

   buf=os.read(0,32768)
   lc=None
   while buf:
      os.write(fd,buf)
      lc=buf[-1]
      buf=os.read(0,32768)

   # Because I'm paranoid, I require that the last character appended
   # be a newline. This avoids a scenario where the previous message
   # might change how the next message is handled by some software.
   #
   if lc != '\n':
      logit("warning: added missing final newline to: "+filename)
      os.write(fd,'\n')
   elif lc == None:
      logit("warning: empty input recieved for: "+filename)
      # At this point I could append a newline, but... probably not needed.

   #raise UserWarning("test")		# debug error injection
   #time.sleep(200)			# error injection
   os.close(fd)

   write_delay=int(time.time() - pre_write)
   if write_delay > 10:
      # We were successful in writing the file, however, if there was
      # a delay completing the operation. This should be investigated
      # because there could be a problem with assumptions in postfix
      # or other software.
      logit("warning: delay %d seconds writing %s" % (write_delay,filename))

   return 0 # success

if __name__ == "__main__":
   # Run as a program.
   try:
      rc = main(sys.argv[1:])
      # rc is is used by postfix to discard email or retry delivery later.
   except Exception as e:
      # Catch-all exception!
      exc_type, exc_obj, exc_tb = sys.exc_info()
      # Treat all unknown errors as "try again later".
      rc = 75
      logit("Internal ERROR at line %d: %s" % (exc_tb.tb_lineno, str(e)))

   sys.exit(rc)
